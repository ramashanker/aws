---
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: CloudFormation for farget cluster
Parameters:
  # ----------------------------------------------
  # Running environment variables
  Zone:
    Type: String
  Site:
    Type: String
  Solution:
    Type: String
  Environment:
    Type: String
  Component:
    Type: String
  ComponentShortName:
    Type: String
  SemanticVersion:
    Type: String
  GlobalComponentName:
    Type: String
  RegionalComponentName:
    Type: String
  DockerRegistryUrl:
    Type: String
  CertificateArn:
    Type: String
  SslPolicy:
    Type: String
  HostedZoneId:
    Type: String
  DomainName:
    Type: String
  # ----------------------------------------------
  AsSimulatorSecretsArn:
    Type: String

  # ----------------------------------------------
  # Container & Task configurations
  DesiredTaskCount:
    Type: Number
    Default: 1
  MinTaskCount:
    Type: Number
    Default: 1
  MaxTaskCount:
    Type: Number
    Default: 1
  CpuSize:
    Type: Number
    Default: 512
  CpuUsage:
    Type: Number
    Default: 50
  MemorySize:
    Type: String
  ContainerPort:
    Type: Number
    Default: 12080
  LoadBalancerPort:
    Type: Number
    Default: 443
  # ----------------------------------------------
  # CIDRs for security groups
  EuVpcStackCidr:
    Type: String
    Default: ""
  VpcStack:
    Type: String
  OnPremCidr0:
    Type: String
    Default: "172.27.38.0/26"
    AllowedPattern: '^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2])))|N\/A$'
  OnPremCidr1:
    Type: String
    Default: "172.27.7.128/26"
    AllowedPattern: '^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2])))|N\/A$'
  UtilCidr0:
    Type: String
    Default: "10.183.28.0/22"
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    Description: "This CIDR will be allowed access to the console (8181)"
Conditions:
  ## China Environment
  IsChinaEnv: !Equals [ !Ref Site, "cn-northwest-1" ]
  HasExtraVpcStack: !Not [!Equals [ !Ref EuVpcStackCidr, "" ]]
Resources:
  TheExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${GlobalComponentName}-ecs-exec'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Policies:
        - PolicyName: !Sub '${GlobalComponentName}-role-policy'
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:GetParameter*'
                Resource: !Ref AsSimulatorSecretsArn
  TheTaskRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F3
            reason: "Suppress rule F3 - Until Role can be fixed."
          - id: W11
            reason: "Suppress rule W11 - Until Role can be fixed."
    Properties:
      RoleName: !Sub '${GlobalComponentName}-ecs-task'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${GlobalComponentName}-task-policy'
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssmmessages:OpenDataChannel'
                Resource: '*'
        - PolicyName: !Sub '${GlobalComponentName}-task-secrets-policy'
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:DescribeSecret'
                Resource: !Ref AsSimulatorSecretsArn

  TheLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ '', [ /wcar/fargate/, !Sub '${Solution}-${Environment}-${Component}' ] ]

  TheTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${RegionalComponentName}-task'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref CpuSize
      Memory: !Ref MemorySize
      ExecutionRoleArn: !Ref TheExecutionRole
      TaskRoleArn: !Ref TheTaskRole
      ContainerDefinitions:
        - Name: !Sub '${RegionalComponentName}-container'
          Image: !Sub '${DockerRegistryUrl}/${Component}:${SemanticVersion}'
          Environment:
            # Environment vars that we can use with our spring boot application
            - Name: ZONE
              Value: !Ref Zone
            - Name: SITE
              Value: !Ref Site
            - Name: SOLUTION
              Value: !Ref Solution
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: VERSION
              Value: !Ref SemanticVersion
            - Name: COMPONENT
              Value: !Ref Component
            - Name: COMPONENT_SHORT_NAME
              Value: !Ref ComponentShortName
            # Sets the spring profile to execute the application
            - Name: SPRING_PROFILES_ACTIVE
              Value: !Sub '${Site}-${Environment}'
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref TheLogGroup
              awslogs-stream-prefix: ecs

  TheEcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${RegionalComponentName}-cluster'

  TheEcsSevice:
    Type: AWS::ECS::Service
    DependsOn:
      - TheLoadBalancerListener
    Properties:
      ServiceName: !Sub '${RegionalComponentName}-svc'
      Cluster: !GetAtt TheEcsCluster.Arn
      TaskDefinition: !Ref TheTaskDefinition
      DesiredCount: !Ref DesiredTaskCount
      HealthCheckGracePeriodSeconds: 300
      LaunchType: FARGATE
      EnableExecuteCommand: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - Fn::ImportValue: !Sub '${VpcStack}:private-a'
            - Fn::ImportValue: !Sub '${VpcStack}:private-b'
          SecurityGroups:
            - !Ref TheServiceSecurityGroup
      # This adds the load balancer to the ecs service
      LoadBalancers:
        - ContainerName: !Sub '${RegionalComponentName}-container'
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TheLoadBalancerTargetGroup

  # --------------------------------------------------------------------------------------------
  # The Auto Scaling
  TheAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${GlobalComponentName}-ecs-auto'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  TheTaskAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinTaskCount
      MaxCapacity: !Ref MaxTaskCount
      ResourceId:
        Fn::Join:
          - '/'
          - - service
            - !Ref TheEcsCluster
            - !GetAtt TheEcsSevice.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt TheAutoScalingRole.Arn

  TheTaskAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${RegionalComponentName}-auto-scale'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref TheTaskAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 120
        ScaleOutCooldown: 120
        TargetValue: !Ref CpuUsage

  # --------------------------------------------------------------------------------------------
  # The Load Balancer & DNS

  TheLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internal
      Name: !Sub '${RegionalComponentName}-svc-lb'
      SecurityGroups:
        - !Ref TheLoadBalancerSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub '${VpcStack}:private-a'
        - Fn::ImportValue: !Sub '${VpcStack}:private-b'

  TheLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: TheLoadBalancer
    Properties:
      Name: !Sub '${RegionalComponentName}-tg'
      VpcId:
        Fn::ImportValue: !Sub '${VpcStack}:vpcid'
      TargetType: ip
      Port: !Ref ContainerPort
      Protocol: HTTPS
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /ping/pong
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 10
      HealthyThresholdCount: 2

  TheLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TheLoadBalancerTargetGroup
      LoadBalancerArn: !Ref TheLoadBalancer
      Port: !Ref LoadBalancerPort
      Protocol: HTTPS
      SslPolicy: !Ref SslPolicy

  TheLoadBalancerDns:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt TheLoadBalancer.DNSName
        HostedZoneId: !GetAtt TheLoadBalancer.CanonicalHostedZoneID
      HostedZoneId: !Ref HostedZoneId
      Name:
        Fn::Join:
          - '.'
          - - !Ref ComponentShortName
            - !Ref DomainName
      Type: A

  # --------------------------------------------------------------------------------------------
  # The ECS Security Group

  TheServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: "Suppressing W5, cidr open to world on egress"
    Properties:
      GroupName: !Sub '${RegionalComponentName}-svc-sg'
      GroupDescription: !Sub '${RegionalComponentName}-svc-sg'
      VpcId:
        Fn::ImportValue: !Sub '${VpcStack}:vpcid'
      SecurityGroupIngress:
        - IpProtocol: tcp
          Description: 'Local VPC inbound traffic'
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref TheLoadBalancerSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          Description: 'Outbound rule to reach graphite'
          FromPort: 2003
          ToPort: 2003
          CidrIp: 0.0.0.0/0
        - IpProtocol: TCP
          Description: "Allow access to aws resources"
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  Port53ChinaRule:
    Type: AWS::EC2::SecurityGroupEgress
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: "Suppressing W5, cidr open to world on egress"
    Condition: IsChinaEnv
    Properties:
      Description: "Enables DNS China"
      GroupId: !GetAtt TheServiceSecurityGroup.GroupId
      IpProtocol: udp
      FromPort: 53
      ToPort: 53
      CidrIp: 0.0.0.0/0


  # --------------------------------------------------------------------------------------------
  # The ALB Security Group

  TheLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: "Suppressing W5, cidr open to world on egress"
    Properties:
      GroupDescription: !Sub '${RegionalComponentName}-alb-sg'
      VpcId:
        Fn::ImportValue: !Sub '${VpcStack}:vpcid'
      SecurityGroupIngress:
        - IpProtocol: tcp
          Description: 'Allows traffic to LB from the VPC'
          FromPort: !Ref LoadBalancerPort
          ToPort: !Ref LoadBalancerPort
          CidrIp:
            Fn::ImportValue: !Sub '${VpcStack}:cidr'
        - IpProtocol: tcp
          Description: 'Allows traffic to LB from OnPremCidr0'
          FromPort: !Ref LoadBalancerPort
          ToPort: !Ref LoadBalancerPort
          CidrIp: !Ref OnPremCidr0
        - IpProtocol: tcp
          Description: 'Allows traffic to LB from OnPremCidr1'
          FromPort: !Ref LoadBalancerPort
          ToPort: !Ref LoadBalancerPort
          CidrIp: !Ref OnPremCidr1
        - IpProtocol: tcp
          Description: 'Allows traffic to LB from FsSimCidr'
          FromPort: !Ref LoadBalancerPort
          ToPort: !Ref LoadBalancerPort
          CidrIp: !Ref FsSimCidr
        - IpProtocol: tcp
          FromPort: !Ref LoadBalancerPort
          ToPort: !Ref LoadBalancerPort
          CidrIp: !Ref UtilCidr0
          Description: 'UtilCidr0'
      SecurityGroupEgress:
        - IpProtocol: tcp
          Description: 'Allows traffic from LB to :12080 (instance)'
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: 0.0.0.0/0

  LoadBalancerExtraVPCInboundRule443:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: HasExtraVpcStack
    Properties:
      Description: 'VPC EU inbound rule'
      CidrIp: !Ref EuVpcStackCidr
      FromPort: !Ref LoadBalancerPort
      GroupId: !GetAtt TheLoadBalancerSecurityGroup.GroupId
      IpProtocol: tcp
      ToPort: !Ref LoadBalancerPort
